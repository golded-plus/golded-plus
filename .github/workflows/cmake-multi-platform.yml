name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        include:
          - os: windows-latest
            build_type: Release
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            build_type: Release
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            build_type: Release
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            build_type: Release
            c_compiler: gcc-12
            cpp_compiler: g++-12
          - os: macos-latest
            build_type: Release
            c_compiler: clang
            cpp_compiler: clang++

    steps:
    - uses: actions/checkout@v3

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        sed -n 's/^#define  *\([^ ]*\)  *"\(.*\)" *$/\1=\2/p' srcdate.h >> "$GITHUB_OUTPUT"

    - name: Set Golded version info
      shell: bash
      run: |
        cp golded3/mygolded.__h golded3/mygolded.h

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - uses: benjlevesque/short-sha@v2.2
      id: short-sha
      with:
        length: 6

    - if: matrix.os == 'windows-latest'
      run: |
        mkdir artifacts
        cp ${{ steps.strings.outputs.build-output-dir }}/golded3/Release/golded.exe artifacts/golded.exe
        cp ${{ steps.strings.outputs.build-output-dir }}/goldnode/Release/goldnode.exe artifacts/goldnode.exe
        cp ${{ steps.strings.outputs.build-output-dir }}/rddt/Release/rddt.exe artifacts/rddt.exe

    - if: matrix.os != 'windows-latest'
      run: |
        mkdir artifacts
        cp ${{ steps.strings.outputs.build-output-dir }}/golded3/golded artifacts/golded
        cp ${{ steps.strings.outputs.build-output-dir }}/goldnode/goldnode artifacts/goldnode
        cp ${{ steps.strings.outputs.build-output-dir }}/rddt/rddt artifacts/rddt

    - name: Archive production artifacts
      uses: actions/upload-artifact@v3
      with:
          name: golded-${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.c_compiler }}-${{ steps.strings.outputs.__SRCDATE__ }}-${{ steps.short-sha.outputs.sha }}
          path: |
            artifacts/*
            README.md
